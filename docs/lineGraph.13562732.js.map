{"version":3,"sources":["lineGraph.js"],"names":["margin","top","right","bottom","left","width","height","x","d3","scaleLinear","range","y","races","colors","valueline","Race","line","d","Age","AsianPacificIslander","Black","Hispanic","NativeAmerican","White","svg","select","append","attr","csvFile","require","csv","then","data","domain","max","i","length","call","axisBottom","axisLeft","getMaxValue","maxValue","value","Math"],"mappings":"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","file":"lineGraph.13562732.js","sourceRoot":"../src","sourcesContent":["// set the dimensions and margins of the graph\nvar margin = {top: 20, right: 20, bottom: 30, left: 50},\n    width = 960 - margin.left - margin.right,\n    height = 500 - margin.top - margin.bottom;\n\n// set the ranges\nvar x = d3.scaleLinear().range([0, width]);\nvar y = d3.scaleLinear().range([height, 0]);\n\nvar races = [\"Asian/Pacific Islander\", \"Black\", \"Hispanic\", \"Native American\", \"White\"];\nvar colors = [\"#A6ACAF\", \"#52BE80\", \"#E67E22\", \"#5DADE2\", \"#E74C3C\", \"#2471A3\"];\n\n// define the line\nfunction valueline (Race) {\n  return d3.line()\n      .x(function(d) { return x(d.Age); })\n      .y(function(d) { if (Race == \"Asian/Pacific Islander\") {\n                          return y(d.AsianPacificIslander);\n                        } else if (Race == \"Black\") {\n                          return y(d.Black);\n                        } else if (Race == \"Hispanic\") {\n                          return y(d.Hispanic);\n                        } else if (Race == \"Native American\") {\n                          return y(d.NativeAmerican);\n                        } else {\n                          return y(d.White);\n                        }\n                      });\n}\n\n// append the svg obgect to the body of the page\n// appends a 'group' element to 'svg'\n// moves the 'group' element to the top left margin\nvar svg = d3.select(\"body\").append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n    .attr(\"transform\",\n          \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n// Get the data\nconst csvFile = require(\"./lineData.csv\");\nd3.csv(csvFile, function(d) {\n    // format the data\n    d.Age = +d.Age;\n    d.AsianPacificIslander = +d.AsianPacificIslander;\n    d.Black = +d.Black;\n    d.Hispanic = +d.Hispanic;\n    d.NativeAmerican = +d.NativeAmerican;\n    d.White = +d.White;\n    return d;\n  }).then(function(data){\n\n    // Scale the range of the data\n    x.domain([0, d3.max(data, function(d) { return d.Age; })]);\n    y.domain([0, 1500]).range([height, 10]);\n    //y.domain([0, getMaxValue(data)]).range([height, 10]);\n\n    // Add the valueline path.\n    for (let i = 0; i < races.length; i++) {\n      svg.append(\"path\")\n          .data([data])\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", colors[i])\n          .attr(\"stroke-width\", \"2px\")\n          .attr(\"d\", valueline(races[i]));\n    }\n\n    // Add the X Axis\n    svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x));\n\n    // Add the Y Axis\n    svg.append(\"g\")\n        .call(d3.axisLeft(y));\n\n  })\n\n  function getMaxValue(d) {\n    var maxValue = d[1].value;\n    for (let i = 1; i < d.length; i++) {\n        maxValue = Math.max(maxValue, d[i].value);\n    }\n    return maxValue;\n  }\n"]}