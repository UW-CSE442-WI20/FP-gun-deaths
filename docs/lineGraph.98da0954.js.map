{"version":3,"sources":["lineGraph.js"],"names":["margin","top","right","bottom","left","width","height","x","d3","scaleLinear","range","y","races","colors","valueline","intent","line","d","Age","HomicideCnt","SuicideCnt","getFilteredData","data","race","filter","Race","svg","select","append","attr","csvFile","require","csv","then","domain","max","i","length","call","axisBottom","axisLeft","getMaxValue","maxValue","value","Math"],"mappings":"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","file":"lineGraph.98da0954.js","sourceRoot":"../src","sourcesContent":["// set the dimensions and margins of the graph\nvar margin = {top: 20, right: 20, bottom: 30, left: 50},\n    width = 960 - margin.left - margin.right,\n    height = 500 - margin.top - margin.bottom;\n\n// set the ranges\nvar x = d3.scaleLinear().range([0, width]);\nvar y = d3.scaleLinear().range([height, 0]);\n\nvar races = [\"Asian/Pacific Islander\", \"Black\", \"Hispanic\", \"Native American\", \"White\"];\nvar colors = [\"#A6ACAF\", \"#52BE80\", \"#E67E22\", \"#5DADE2\", \"#E74C3C\", \"#2471A3\"];\n\n// define the line\nfunction valueline(intent) {\n  return d3.line()\n        .x(function(d) { return x(d.Age); })\n        .y(function(d) { if (intent == 1) {\n                          return y(d.HomicideCnt + d.SuicideCnt);\n                        } else if (intent == 2) {\n                          return y(d.HomicideCnt);\n                        } else {\n                          return y(d.SuicideCnt);\n                        } });\n}\n\nfunction getFilteredData(data, race) {\n  return data.filter(function(d) { return d.Race === race });\n}\n\n\n// append the svg obgect to the body of the page\n// appends a 'group' element to 'svg'\n// moves the 'group' element to the top left margin\nvar svg = d3.select(\"body\").append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n    .attr(\"transform\",\n          \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n// Get the data\nconst csvFile = require(\"./lineGraphData.csv\");\nd3.csv(csvFile, function(d) {\n    // format the data\n    d.Age = +d.Age;\n    d.HomicideCnt = +d.HomicideCnt;\n    d.SuicideCnt = +d.SuicideCnt;\n    return d;\n  }).then(function(data){\n\n    // Scale the range of the data\n    x.domain([0, d3.max(data, function(d) { return d.Age; })]);\n    y.domain([0, 1500]).range([height, 10]);\n    //y.domain([0, getMaxValue(data)]).range([height, 10]);\n\n    // Add the valueline path.\n    for (let i = 0; i < races.length; i++) {\n      svg.append(\"path\")\n          .data([getFilteredData(data, races[i])])\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", colors[i])\n          .attr(\"stroke-width\", \"2px\")\n          .attr(\"d\", valueline(1));\n    }\n\n    // Add the X Axis\n    svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x));\n\n    // Add the Y Axis\n    svg.append(\"g\")\n        .call(d3.axisLeft(y));\n\n  })\n\n  function getMaxValue(d) {\n    var maxValue = d[1].value;\n    for (let i = 1; i < d.length; i++) {\n        maxValue = Math.max(maxValue, d[i].value);\n    }\n    return maxValue;\n  }\n"]}